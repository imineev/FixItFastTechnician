package oracle.mobile.cloud.sample.fif.technician.mcs.mbe;

import oracle.adfmf.framework.api.AdfmfContainerUtilities;
import oracle.adfmf.framework.api.AdfmfJavaUtilities;
import oracle.adfmf.framework.exception.IllegalArgumentException;

import oracle.mobile.cloud.sample.fif.technician.mcs.diagnostic.Diagnostics;

/**
 * Mobile Backend instance for the FiF MCS backend
 *
 * @author Frank Nimphius
 * @copyright Copyright (c) 2015 Oracle. All rights reserved.
 */
public class FiFMobileBackend {
    
    private String mobileBackendName = "";
    private Diagnostics mDiagnostics = null;
    private FiFMBEConfig mbeConfiguration = null;
    private String mFeatureName  = "Unknown Application/Feature Name";
    private String clientUID = java.util.UUID.randomUUID().toString();
        
    /**
     * Creates an instance of MobileBackend (MBE) that represents a mobile backend instance in MCS
     * 
     * @param mobileBackendName (required) the name of the mobile backend instance. The name of the instance should match the name of the mobile backend in MCS
     * @param mbeConfig (required) a configuration object that contains information about the MBE instance in MCS (e.g. mibile backend id)
     */
    
    public FiFMobileBackend(String mobileBackendName, FiFMBEConfig mbeConfig){           
        super();     
        
        if(mobileBackendName == null || mobileBackendName.isEmpty() || mbeConfig == null){
            IllegalArgumentException illegalArgumentException = new IllegalArgumentException();
            illegalArgumentException.setMessage("mobileBackendName and mbeConfig arguments cannot be null or rmpty in call to MBE consructor: " +
                                                "mobileBackendname: "+mobileBackendName+" mbeConfig is null = "+(mbeConfig == null?true:false));
            throw illegalArgumentException;
        }

        this.mobileBackendName = mobileBackendName;      
        mDiagnostics = new Diagnostics(this);
          
        String featureName = AdfmfJavaUtilities.getFeatureName();
        String mafAppName  = AdfmfContainerUtilities.getApplicationInformation().getName();
        this.mFeatureName = mafAppName+"::"+featureName;
        
        this.mbeConfiguration = mbeConfig;
        
    }

    public void setMbeConfiguration(FiFMBEConfig mbeConfiguration) {
        this.mbeConfiguration = mbeConfiguration;
    }

    public FiFMBEConfig getMbeConfiguration() {
        return mbeConfiguration;
    }
    
    public void setApplicationFeatureName(String featureName) {
        this.mFeatureName = featureName;
    }

    public String getApplicationFeatureName() {
        return mFeatureName;
    }

    /**
     * The utility has no handle to the actual device ID and as such will generate a UID for
     * the backend instance: java.util.UUID.randomUUID().toString();. If a MAF application
     * has access to the client device ID, it can be passed in here.
     * @param clientUID
     */
    public void setClientUID(String clientUID) {
        this.clientUID = clientUID;
    }

    /**
     * get backend clientId, which by defaults is generated by this utility
     * @return
     */
    public String getClientUID() {
        return clientUID;
    }


    public void setDiagnostics(Diagnostics diagnostics) {
        this.mDiagnostics = diagnostics;
    }

    /**
     * Access to the Diagnostic instance associated with this mobile backend
     * @return Diagnostics
     */
    public Diagnostics getDiagnostics() {
        return mDiagnostics;
    }

}
